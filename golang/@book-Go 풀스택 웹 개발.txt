1107

golang: book: Go Full-Stack Web Development


# 변수 선언
- type을 설정하지 않고, 다른 type의 변수를 동시에 초기화 가능.
- 함수 안에서 변수를 선언하고 초기화할 때, `:=` (이 때 '타임 추론'을 함. type interface)

# 기본 자료형
- bool, string, int 8,16,32,64, uint 8,16,32,64,ptr, byte, rune, float32,64, complex64,128

- 일반 int형의 비트 수는 시스템 환경에 따라 선택. (최신 CPU는 64, 구형 CPU 32)
- uintptr은 메모리 주소를 저장할 수 있는 크기의 부호가 없는 정수형.
- byte=uint8
- rune=int32 (유니코드 문자를 나타내려 사용)
- complex64는 float32 크기의 실수부와 허수부로 구성된 복소수를 나타냄. (128->64)

# 포인터(ptr, pointer)
: 변수의 메모리 주소를 저장하는 또 다른 변수.
: 변수의 값을 복사하지 않고, 메모리에 있는 실제 값을 참조할 수 있음.

---go
var iptr *int
---

- ptr의 zero 값은 nil. (`=.null of java)

---go
var xptr = &x
---
&:참조:x의 메모리 상 주소.

---go
y := *xptr
---
*:역참조(de-referencing): 포인터가 가리키는 주소에 저장된 값.

---go
*xptr = 4
---
포인터가 가리키는 값을 바꿀 수 있음.


# 함수
- args의 type이 같으면 한 번에 정의해도 됌.
- 반환하는 값도 type을 정의 가능. (주의, 한 번에 type 정의가 될 수 있음)

- Go 언어에서 함수는 일급(first-class) 함수.
- 따라서 함수를 변수에 바인드하고 값처럼 사용 가능.
- 다른 함수의 인자로 사용 가능.
- execute 함수를 사용해 특정 함수를 호출 가능.

# 가변 함수
---go
func infiniteAdder(inputs ...int) (sum int) {
  for _, v := range inputs {
    sum += v
  }
}
---

# 다른 패키지 함수 호출

- Golang에는 다른 정적 언어에 있는 private, public 접근 제어자가 없음.
- 대신, public 하뭇의 이름은 대문자로 시작해야함.
- 이런 함수는 exported 함수라고 부름.
- 소문자로 시작하는 함수는 패키지 내에서만 접근할 수 있는 unexpected 상태임.


# Closure

: 함수 바깥에 정의된 변수를 참조하는 함수 값.

- 해당 변수에 대한 접근과 수정이 가능

# Array
: 동일한 자료형의 모음
: len 함수
: 함수 안에서는 :=
: python의 slice처럼 사용 가능.

# Slice
: Go 언어는 따로 슬라이스라는 자료 구조 제공. (사용자 측면에서는 동적 배열)

- 초기값이 없는 비어있는 슬라이스 길이를 미리 지정하고 싶다면 make 내장 함수 사용.

- Slice는 배열의 일부를 가리키는 Pointer.
- 1. 하위 Arrray의 첫 번째 요소를 가리키는 Pointer
- 2. Slice가 참조하는 하위 Array의 Length
- 3. 원본 Array의 용량은 Slice의 길이보다 크거나 같다. (용량: 원본 배열에 남아있는 요소의 수)

즉, 배열을 가리키는 Pointer, 배열 Length, 원본 배열 용량
2개를 슬라이스하면, 원본 배열의 용량이 5라는 가정하에, 남은 용량은 3이됌.

- cap 함수 (capacity)

슬라이스를 다시 슬라이스하면 위 3가지가 변경됨.
-> 메모리의 효율성 때문

- 메모리의 효율성: 
메모리 과다 사용을 피하려면 배열에서 필요한 부분만 새로운 슬라이스에 복사 - copy 함수 사용
---go
var myBigSlice = []int{1,2,3,4,5}
var mySubSlice = make([]int, 2)
copy(mySubSlice, myBiSlice[2:4])
---

슬라이스의 크기를 늘리는 방법: 요소를 추가하는 방법: append(): 모든 데이터를 담을 수 있는 크기의 내부 배열을 가진 슬라이스를 새로 만드는 것임. append함수도 가변 함수

make() 함수는 길이 뿐만 아니라 용량도 설정 가능. ex) make([]int, 3, 5)
용량을 설정하지 않으면 길이와 용량이 같은 슬라이스가 생성됌.

# Map
: HashMap
: key-value쌍의 집합.
---go
선언: var myMap map[int]string
초기화: myMap = make(map[int]string)
선언+초기화: myMap = map[int]string{}
특정 키가 존재하는지 확인: x,ok := myMap[key] // ok: true or false
특정 키 삭제: delete(myMap, key)
---

# Struct(구조체)
: 여러 자료형의 집합
---
type myStruct struct {
  filedname fieldtype
  ...
}
---

- Struct literal(구조체 리터럴) 초기화
: 키와 값을 열거하는 초기화 방식.
---
var s = myStruct{
  key: vale,
  ...
}
---

- dot notation(점 표기법)
---
var s = myStruct{}
s.key = val
---

- 구조체 포인터
---
var sPtr = &myStruct{
  key: val,
  ...
}
---
: 구조체 포인터에 점 표기법을 사용하면 포인터를 역참조(*)하지 않아도 됌.


# Method (메서드)
: Type에 연결하는 함수

- Method의 Receiver: 
---
func (p Person) GetName() string {
  return p.name
}

func (p Person) GetAge() int {
  return p.age
}
---

# Type Embbeding (타입 임베딩)
: golang에서 상속에 가장 가까운 개념.
: 다른 구조체의 메서드가 상속받는 방법.

---
type Student struct {
  Person
  fieldname fieldtype
}
s := Student{}
s.GetAge()
s.GetName()
---


# Interface
- 메서드를 사용해 더 효율적이고 확장성 높은 Go 코드를 작성하려면 인터페이스의 개념을 반드시 이해할 필요가 있음.
: 메서드의 집합.
---
// 인터페이스의 인스턴스에 구조체를 할당
// 매개변수로 사용되는 구조체의 타입을 인터페이스로 규정.
---

- Type Assertion (타입 단언)
: 인터페이스 타입의 값을 특정 타입으로 변환.
---
person, ok := InterfaceInstance.(Struct) // 인스턴스의 값이 Struct 타입이면 ok는 true, person는 해당값 아니면 비어있음


# if, switch 문

: break 키워드가 없음.
: golang의 case는 자동으로 break 

: if문과 마찬가지로 switch문도 변수 초기화 가능.

---
switch x := getX(); x { case <condition>:... }
---

: 다음 case문으로 넘어가야한다면 fallthrough 키워드


# Loop 문

Array, Slice 순회 -> for..range
---
for i,item := range <array|slice>
i를 _로 쓰면 인덱스 생략 // for _,item := range slice
i만 필요하다면 요소 생략 // for i := range slice
---
- **for..range는 요소의 복사본을 반환하기 때문에 원래 값을 수정할 수 없음.
- 인덱스로 직접 요소를 참조하면 가능. myslice[i]

- while문 없음
- break, continue 키워드가 있음.


# panic, recover, defer

- panic 함수를 호출: 프로그램 중단, 패닉 메세지 반환.
- 따라서 panic을 제 때 처리하지 않으면 프로그램이 종료됌.
- panic 함수의 인자는 반환할 패닉 메세지.

- defer <code>: 해당 코드의 부모 함수가 결과를 반환한 뒤에 실행됨.
- 함수 호출 리스트에 함수를 추가하고 부모 함수 실행이 끝나면 순차적으로 호출.
- 파일 핸들러 정리 같은 자원 정리 용도.
- defer은 스택 기반 (FILO: 선입후출)

- **defer과 recover() 내장 함수를 사용해 panic을 예외 처리하고 메세지를 반환하면, 프로그램을 중단시키지 않고 panic을 사용할 수 있음.

---
func main() {
  panicTest(true)
  fmt.Println("hello world")
}

func checkPanic() {
  if r := recover(); r != nil {
    fmt.Println("...")
  }
}

func panicTest(p bool) {
  defer checkPanic()
  if p {
    panic("panic requested")
  }
}
---
panic이 발생하지 않으면 recover는 nil을 반환.




# Chapter 3

- 동시성
- 고루틴
- Go 채널
- select 문
- sync 패키지


## Concurrency

: 프로그램을 여러 독립된 작은 단위로 나누고 주어진 자원을 사용해 빠르게 동시다발적으로 수행하는 행위.
: paging?

: 스레드보다 더 포괄적임.

: 스레드는 프로그램을 병렬로 수행할 수 있도록 OS에서 지원하는 기능
: OS가 만약 4개의 스레드를 지원한다면 프로그램의 수천 개 작업을 동시에 수행할 수 있음.

: 즉, 스레드의 병렬 처리 + 스레드 사이의 작업 스케줄링과 분산 처리 (복잡한 알고리즘->간결한 API)


## goroutine

: 경량 스레드.

- Go 언어가 제공하는 API를 사용해 쉽게 동시성 구현.

- 고루틴으로 정의된 코드는 런타임에 다른 고루틴과 동시에 실행.

- main 함수는 메인 고루틴.
- go 키워드로 함수를 고루틴으로 실행해도 main 함수가 끝나면 실행 중간에 프로그램이 끝남.
- Sleep 함수 이용.

- 고루틴은 메모리와 자원 측면에서 매우 가벼움.


# Go Channel

- 고루틴끼리 어떻게 데이터를 공유하는가?
- 여러 스레드를 사용하는 프로그램에서 데이터 공유는 lock을 거는 방식을 주로 사용. (메모리 공유 방식)

- "공유 메모리로 소통하지 말고, 소통을 통해서 메모리를 공유하라"
- 간단하게 말해 잠금을 사용한 스레드 간 메모리 공유는 지양하라는 뜻.

- 대신 고루틴에서 다른 고루틴으로 데이터를 전달하는 방법을 사용하는 것이 좋음.
- Go 채널 이용.


:: regular 채널 (일반 채널)
- make키워드로 선언 `myChannel := make(chan int)` // int값을 전달하는 채널 선언 초기화
- `myIntValue := <-myChannel` // 채널을 통해 전달받은 값
- myChannel <- 4 // 값 보내기

- 채널을 통해 데이터를 받거나 보내면 해당 고루틴은 송수신이 완료될 때까지 대기.
- 즉, 데이터를 보냈지만 기다리는 고루틴이 없다면 해당 고루틴은 대기. 반대로 무한 수신 대기도 있음.
- 이 방식은 데이터를 동기화하고 최신으로 유지할 수 있음. 잠금 방식보다 문제가 적음.

---
for {
  i, ok := <- ch
  if !ok {
    break
  }
  fmt.Print
}
---

---
for i := range ch {
  fmt.Print
}
---
for...range문은 채널이 닫힐 때까지 데이터를 받음.


:: buffered 채널 (버퍼 채널)

여러 값을 버퍼에 저장하는 특수한 채널

버퍼 채널은 다음의 경우에만 대기










 

