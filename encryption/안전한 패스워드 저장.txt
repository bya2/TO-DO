1030

# 안전한 패스워드 저장

- Stability of security system
- Stability of encryption algorithm

- One-way Hash Function
- Solting
- Key Stretching
- Adaptive Key Derivation Functions(PBKDF2, bcrypt, scrypt)

- Hash Function
- Plain Text
- Digest
- Brute-Force Attack


# 보안 시스템의 안정성
: 보안 시스템은 여러 부분에서 이루어지므로, 공격자가 이 중에서 가장 취약한 부분을 공격할 것이라고 가정할 필요가 있음. 따라서 보안 시스템의 안정성은 '강한 부분이 얼마나 강한가'보다는 '약한 부분이 얼마나 약한가'에 따라 좌우된다고 볼 수 있음.



# 해시 함수
: 짧은 시간 내에 데이터를 검색하기 위해서 설계된 알고리즘.



# 단방향 해시 함수
: 수학적인 연산을 통해 원본 메세지를 변환하여 암호화된 메세지인 다이제스트를 생성. 원본 메세지를 알면 암호화된 메세지를 구하기는 쉽지만, 암호화된 메세지로는 원본 메세지를 구할 수 없으므로 '단방향성'임.



# 단방향 해시 함수의 문제점: [인식 가능성, 속도]

- 인식 가능성(Recognizability)
: 동일한 메세지가 언제나 동일한 다이제스트를 갖는다면, 공격자가 전처리된 다이제스트를 가능한 한 많이 확보한 다음 이를 탈취한 다이제스트와 비교해 원본 메세지를 찾아내거나 동일한 효과의 메세지를 찾을 수 있음.

- 속도(Speed)
: 해시 함수의 빠른 처리 속도로 인해 공격자는 매우 빠른 속도로 임의의 문자열의 다이제스트와 해킹할 대상의 다이제스트를 비교할 수 있음. 이런 방식으로 패스워드를 추측하면 패스워드가 충분히 길거나 복잡하지 않은 경우에는 그리 긴 시간이 걸리지 않는다.
: 반면 사용자는 웹 사이트에서 패스워드를 인증하는 데 걸리는 시간에는 그리 민감하지 않음.



# 단방향 해시 함수를 보완: [Salting, Key Stretching, Adaptive Key Derivation Functions]

- Salting
: *Salt: 단방향 해시 함수에서 다이제스트를 생성할 때, 메세지에 추가되는 바이트 단위의 임의의 문자열.
: *Salting: 메세지에 솔트를 추가하여 해시 함수를 통해 다이제스트를 생성.
: 공격자가 메세지의 다이제스트를 알아내더라도 솔팅된 다이제스트를 대상으로 패스워드 일치 여부를 확인하기 어려움. (사용자별로 다른 솔트를 사용한다면 동일한 패스워드를 사용하는 사용자의 다이제스트가 다르게 생성되어 인식 가능성 문제를 크게 개선할 수 있기 때문)

- Key Stretching
: *입력한 메세지의 다이제스트를 생성하고, 생성된 다이제스트를 입력 값으로 하여 다이제스트를 생성하고, 또 이를 반복하는 방법으로 다이제스트를 생성.
: 잘 설계된 패스워드 저장 시스템에서는 하나의 다이제스트를 생성할 때 어느 정도(일반적인 장비에서 0.2초 이상)의 시간이 소요되게 설정. 이는 억지 기법 공격(brute-force attack)으로 패스워드를 추측하는 데 많은 시간이 소요되도록 하기 위한 것임.
: 솔트를 추가한 패스워드에 키 스트레칭 과정을 적용하여 다이제스트를 생성할 수 있음.

- Adaptive Key Derivation Functions: [PBKDF2, Bcrypt, Scrypt]
: (Salting + Key Stretching)
: *다이제스트를 생성할 때 솔팅과 키 스트레칭을 반복하며 솔트와 패스워드 외에도 입력 값을 추가하여 공격자가 쉽게 다이제스트를 유추할 수 없도록 하고 보안의 강도를 선택.



# PBKDF2
: *솔트를 적용한 후 해시 함수의 반복 횟수를 임의로 선택하는 Key Derivation Function.
: 아주 가볍고 구현하기 쉬우며 SHA와 같은 검증된 해시 함수를 사용.



# Bcrypt
: *패스워드 저장을 목적으로 설계된 Key Derivation Function.
: "work factor" 인자는 하나의 해시 다이제스트를 생성하는 데 얼마만큼의 처리 과정을 수행할지 결정.  "work factor"를 조정하는 것만으로 간단하게 시스템의 보안성을 높일 수 있음.



# Scrypt
: PBKDF2와 유사.
: *다이제스트를 생성할 때 메모리 오버헤드를 갖도록 설계된 Key Derivation Function.
: 따라서 억지 기법 공격(brute-force attack)을 시도할 때 병렬화 처리가 매우 어려워짐.
: *파라미터: Digest = scrypt(Password, Salt, CPU cost, Memoray cost, paralleization, Digest length)



# Scrypt 파라미터 약어
- Password: 패스워드
- Salt: 암호학 솔트
- N: CPU cost,
- r: Memory cost,
- p: 병렬화(parallelization),
- DLen: Digest length



# 정리
- MD5, SHA-1, SHA-256, SHA-512 등의 해시 함수는 메시지 인증과 무결성 체크를 위한 것.
- 이를 해결하기 위해서 Key Derivation Function을 사용.
- ISO-27001의 보안 규정을 준수하고, 서드파티의 라이브러리에 의존하지 않으면서 사용자 패스워드의 다이제스트를 생성하려면 PBKDF2-HMAC-SHA-256/SHA-512을 사용.
- 매우 강력한 패스워드 다이제스트를 생성하는 시스템을 쉽게 구현하고 싶다면 bcrypt를 사용
- 구현하려는 시스템이 매우 민감한 정보를 다루고, 보안 시스템을 구현하는 데 많은 비용을 투자할 수 있다면 scrypt를 사용.
- 패스워드 다이제스트의 강도는 결국 패스워드 자체의 길이와 유일성 같은 엔트로피에 의해서 결정됨. 따라서 사용자가 안전한 패스워드를 설정하도록 패스워드 정책을 설정하는 것이 매우 중요.



출처:
https://d2.naver.com/helloworld/318732