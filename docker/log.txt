0921

개발에 컨테이너 사용
```
1. 컨테이너에서 데이터베이스 실행.
2. 데이터를 유지하기 위해서 볼륨과 네트워킹 사용.
3. 애플리케이션이 데이터베이스와 통신
4. 위의 모든 것을 Compose 파일로 종합.
5. 디버거와 애플리케이션(컨테이너 내에서 실행)을 연결.
```

볼륨 생성
```
docker volume create <name>
```

네트워크 생성
```
docker network create <name>
```

용어 정리
```
Compose 파일: Command로 로컬 개발 환경을 설정하고 실행할 수 있는 파일.

Run command 옵션
    -i(--interactive)	: 컨테이너와 연결되지 않은 상태에서도 표준 입력(STDIN) 유지
    -t(--tty)	: TTY모드(psedo-TTY) 사용
    --rm		: 컨테이너 종료 시 자동으로 제거
    -d(--detach)	: 백그라운드로 컨테이너 실행, 컨테이너 ID 출력
    -v(--volume)	: 볼륨을 컨테이너에 마운트

볼륨(Volume)
    : 컨테이너 간에 데이터 공유를 목적으로 생성한 어떤 공간.
    - 따라서 여러 개의 컨테이너가 하나의 볼륨 공간에 접근해서 데이터를 공유.
    - 호스트 파일 시스템에 도커 공간 생성하고 컨테이너에 마운트.

Compose
    : 여러 개의 
    - 단일 호스트에서 여러 개로 분리된 환경
    - 컨테이너를 생성했을 때 볼륨 데이터 보존
    - 변경된 컨테이너 재생성
    - 변수 및 환경 간 구성 이동: Compose 파일 안에 변수 지원,
```

```
Compose를 사용하는 것에 대한 3단계 프로세스
1. 도커 파일(Dockerfile)로 앱 환경 정의 (so 이를 어디서든 복사)
2. 컴포즈 파일(docker-compose.yml)에서 앱을 구성하는 서비스 정의 (so 분리된 환경에서 함께 실행 가능)
3. 전체 앱을 실행(docker compose up)
```

```
Compose가 앱의 전체 라이프사이클을 관리하기 위해 가지고 있는 커맨드
- 시작, 중지, 다시 빌드 서비스
- 실행중인 서비스 상태 보기
- 실행중인 서비스 스트림 로그 출력
- 서비스에서 'one-off' 커맨드 실행
```

```
Compose를 효과적으로 만드는 기능들
1. 단일 호스트에서 다중 분리 환경
2. 컨테이너 생성 때 볼륨 데이터 보존
3. 변경된 컨테이너만 재생성 (컴포즈는 컨테이너를 생성하는데 사용되는 구성을 복사. 변경되지 않은 서비스를 재시작할 때 기존 컨테이너 재사용. 이는 환경을 빠르게 변경할 수 있음을 의미.)
4. 변수 및 환경 사이의 구성 이동
```

0920
```
도커 파일로 이미지 빌드
빌드한 이미지를 컨테이너로 실행
```


0919

커맨드
```
docker build
docker commit
docker cp
docker run
docker tag
```

도커 파일
```
ARG
FROM
RUN
ENV
WORKDIR
```