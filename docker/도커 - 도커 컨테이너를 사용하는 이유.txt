1016

도커 컨테이너를 사용하는 이유

---1.
# 도커 컨테이너는 소프트웨어를 제어할 한 수단을 제공

도커를 이용해 애플리케이션을 패키징하면, 패키징 전개와 런타임 문제를 외부에서 제어할 수 있음.
예컨대, 
 - 애플리케이션을 네트워크에 노출하는 방식,
 - 애플리케이션의 스토리지,
 - 메모리,
 - I/O 이용을 관리하는 방식,
 - 접근 권한을 통제하는 방식

이를 컨테이너화된 애플리케이션들 전체에 일괄적으로 적용할 수 있음.


---2.
# 도커 컨테이너가 어떻게 소프트웨어의 구축과 전개를 더 쉽게 만드는지에 대한 설명

도커 컨테이너의 장점,
 - 시스템 자원을 더 효율적으로 사용할 수 있게 함. 
    = 앱이 가상 머신에서보다 훨씬 더 적은 메모리를 사용,
    = 앱을 더 신속하게 시작 및 중지,
    = 앱을 호스트 하드웨어에서 훨씬 더 밀도 있게 배치.

 - 소프트웨어 전달 주기를 가속함. (변화하는 환경에 신속하게 대응)
    = 수요에 맞춰 스케일링을 간단히,
    = 바즈니스가 요구하는 신기능을 추가하는 업데이트를 간단히,

    = 도커 컨테이너는 새 업무 기능을 가진 소프트웨어의 신 버전을 신속하게 실무에 투입할 수 있고, 필요 시 이전 버전으로 신속히 롤백할 수 있다.

 - 애플리케이션 이동을 가능하게 함. (앤터프라이즈 애플리케이션을 어디서 실행하는 가는 중요한 문제)
    = 가까이에 안전한 상태로 두기 위해서는 방화벽 뒤에서 앱를 실행.
    = 간편한 퍼블릭 접근과 자원의 높은 탄력성을 원한다면 퍼블릭 클라우드에서 앱를 실행.

    = 도커 컨테이너는 앱을 실행해야하는 모든 것들만을 '캡슐화'함. 이를 통해 앱이 환경들 사이에서 솝쉽게 이동 가능.

 - 마이크로서비스 아키텍처
    = 마이크로서비스 접근법, 애자일 개발 프로세스에 완벽히 부합함. (마이크로서비스를 이행하는데 필수적인 것은 아님)


도커 컨테이너의 단점,
 - 보안 문제를 해소하는 것은 아님.
    = 컨테이너 안의 소프트웨어는 기존보다 더 안전함.
    = 그러나, 컨테이너는 앱에 보안 계층을 하나 추가한 것 뿐이고, 이는 앱을 보호하는 일반적인 프로그램의 일부로서임.

 - 앱을 마이크로서비스로 변환시키지 않음.
    = 앱의 설계가 자동으로 변한다거나, 다른 앱과 상호작용하는 방법이 변하는 것은 아님.
    = 따라서 당연히 개발자의 노력과 시간을 거쳐야함.

 - 도커는 가상 머신의 대체물이 아님.
    = VM이 컨테이너보다 더 많은 격리를 제공하기 때문에, VM의 필요성이 존재할 수 있음.
