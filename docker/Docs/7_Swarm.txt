1012

-정의:
*오케스트레이션: 컨테이너형 애플리케이션을 관리, 확장, 유지보수하는 툴.
*스웜: 도커 엔진에 내장된 오케스트레이션.
*노드: 스웜에 참여하는 도커 엔진의 인스턴스. 단일 실제 컴퓨터나 클라우드 서버에서 수 개의 노드를 실행 가능.
*매니저 노드: 
*워커 노드:
*에이전트:
*서비스: 노드에서 실행되는 작업(Tasks)의 정의.
*Ingress 로드 밸런싱: 스웜 외부에서 사용할 수 있도록 하는 서비스를 표시하기 위해서 사용.

도커 CLI는 스웜을 생성하고, 스웜은 애플리케이션 서비스를 배포.
도커 엔진에 스웜 내장.

스웜에 애플리케이션을 배포하기 위해선, 매니저 노드에 서비스 정의를 제출.

매니저 노드는 Tasks라는 작업 단위를 각 워커 노드에게 전달.
매니저 노드는 원하는 스웜 상태를 유지하는데 필요한 오케스트레이션 기능과 클러스터 관리 기능을 수행.
매니저 노드는 오케스트레이션 작업을 수행할 단일 리더를 선출(선택).

워커 노드는 매니저 노드로부터 보내진 작업을 받고 실행.

디폴트로 매니저 노드는 워커 노드로도 실행하지만,
매니저 Tasks만 실행하거나, 매니저 전용 노드가 되도록 구성 가능.

각 에이전트는 워크 노드에서 실행. 할당된 작업에 대해서 보고.

매니저 노드는 각 작업 노드가 원하는 상태를 유지할 수 있도록, 할당된 작업의 현재 상태를 매니저 노드에게 알림.


-기능:
1. 클러스터 관리
2. 탈중앙화 디자인
3. 선언형 서비스 모델
4. 확장
5. 원하는대로 상태 조정
6. 멀티 호스트 네트워킹
7. 서비스 검색
8. 로드 밸런싱
9. 디폴트 보안
10. 롤링 업데이트

*컴퓨터 클러스터: 컴퓨터의 집합. 이 집합의 컴퓨터들이 연결되어 하나의 시스템처럼 동작.
*클러스터 관리: 애플리케이션 서비스가 배포될 수 있는 스왐을 생성하기 위해 도커 엔진 CLI 사용.

*탈중앙화 디자인: 배포 시에 노드 역할 간 분리를 처리하는 대신, 도커 엔진은 런타임 시에 분산을 처리.

*애플리케이션 스택: 네트워크에 따라 제한적으로 접근 가능한 컨테이너 애플리케이션들의 나열된 구조. (Stack: Push, pop, LIFO)
*선언형 서비스 모델: 도커 엔진은 애플리케이션 스택에서 다양한 서비스의 원하는 상태를 정의하려고 선언적 접근을 사용.

*확장: 각 서비스에서, 실행하려는 작업의 수 선언 가능. 스케일을 넓이거나 줄일 때, 스웜 매니저는 원하는 상태를 유지하기 위해 작업을 추가하거나 제거하여 자동으로 적응.

*원하는 대로 상태 조정: 스웜 매니저 노드는 (지속적으로) 클러스터 상태를 모니터링하고, 실제 상태와 원하는 상태 간에 차이를 조정.

*멀티 호스트 네트워킹: 서비스에 대한 오버레이 네트워크 지정 가능. 스웜 매니저는 애플리케이션을 초기화하거나 업데이트할 때 오버레이 네트워크의 컨테이너에 주소를 자동으로 할당.

*로드 밸런스: 네트워크 내 여러 컨테이너로 트래픽을 균등하게(혹은 알고리즘에 따라) 분산.
*서비스 검색: 스웜 매니저 노드들은 스웜의 각 서비스에 고유 DNS 이름을 할당하고 실행중인 컨테이너의 로드 밸런스 조정.

*로드 밸런싱: 각 서비스 포트를 외부 로드 밸런서에 표시. 내부적으로 스웜은 노드 간 서비스 컨테이너 배포 방법 지정.

*디폴트 보안: 스웜의 각 노드는 보안 통신에서 노드 간에 'TLS 상호 인증'과 '암호화' 강제.

*롤링 업데이트: 원격 설치 시, 서비스 업데이트를 노드에 점진적으로 적용 가능.

-출처

https://docs.docker.com/engine/swarm/