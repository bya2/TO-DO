1021, 1022

웹 서버 구축

3.1  웹의 구조와 HTTP 통신의 기본

3.1.1 웹 애플리케이션

 *웹 애플리케이션: 인터넷과 인트라넷 등의 네트워크를 통해서 웹 브라우저를 사용하고 조작하는 애플리케이션.

 *네이티브 애플리케이션: 단말기에 설치하여 실행하는 애플리케이션.

 - 웹 애프리케이션은 브라우저에서 애플리케이션에 접근하면 네트워크 상에 있는 웹 서버에서 프로세싱. 프로세싱 결과를 브라우저에 표시.
 - 네이티브 애플리케이션은 설치한 단말기상에서 프로세싱이 실행.

 ... 그 외 공부했던 내용이므로 생략.


3.2 S3을 사용한 웹 사이트 구축

 *S3: Simple Storage Service

 - 클라우드상에 스토리지를 제공하는 서비스. (기업 내에서 자주 이용되는 파일 서버 같은)
 - 즉, 클라우드상에서 파일을 공유할 수 있는 서비스.

 - 백업, 아카이브, 재해 대책, 빅 데이터 분석 등 다양한 용도

 기본 용어: *버킷, *오브젝트

 - 버킷 내에 임의의 데이터를 저장할 수 있음. (데이터의 용기)
 - 버킷 이름은 모든 리전에서 유일해야한다. (이름이 중복되면 안됨)
 - 버킷 속에 데이터를 저장했다면, 다음은 버킷의 접근 권한을 설정하고 데이터를 공개. (웹 콘텐츠를 S3 오브젝트로 저장)

 - 업로드 과정: [ S3 - 버킷 작성 - 웹 콘텐츠 준비 - 이들을 S3의 객체로 업로드]
 - 데이터 공개(파일) 과정: [ 업로드한 해당 파일 선택 - 컨텍스트 메뉴 - 공개 ]
 - 도메인 이름만으로 접근 과정: [ 해당 버킷 - 등록 정보 - 정적 웹 사이트 호스팅 - 이 버킷을 사용하여 웹 사이트 호스팅 - 저장 ]


3.3 EC2를 사용한 웹 사이트 구축

 ^: S3을 이용하면 웹 사이트를 쉽게 구축할 수 있지만, 상세한 설정이 불가능함. 따라서 가상 서버 기능을 제공하는 EC2를 사용


 EC2: 가상 서버 기능을 제공하는 클라우드 서비스. (온프레미스 형태의 기업 시스템에서 Windows서버나 UNIX서버에 해당)

 - 온프레미스 환경과 달리, EC2에서는 물리 서버 도입에 드는 초기 비용이 불필요. (인스턴스 스펙과 가동된 시간에 대해서 과금됨.)

 - 가장 큰 특징은 '오토 스케일(Auto Scale)': 
    = 요건의 변화에 맞추어 인스턴스의 처리 능력을 자유롭게 확장 또는 축소할 수 있음.
    = ex) 갑자기 트래픽이 늘어서 서버 기능을 강화하고 싶은 경우, 인스턴스를 자동적으로 확장할 수 있기 때문에, 서버 기능의 정지 없이 서비스를 제공.

 - EC2 기본 용어: *인스턴스, *EBS(Elastic Block Store), *AMI(Amazon Machine Image)

 *인스턴스: 1대의 서버.
 *EBS: 서버의 하드디스크에 해당하는 가상 디스크
 *AMI: 서버에 설치하는 OS와 각종 미들웨어 및 애플리케이션의 이미지. (대충 물리 서버의 OS의 역할이라 보면 됌)

 - AMI에는 인스턴스를 실행하기 위해 필요한 OS/애플리케이션 서버/애플리케이션이 포함되어있음.

 - 동일한 형태의 인스턴스를 여러 개 만들 때는 AMI를 사용.


3.4 - ELB를 사용한 부하 분산 (로드 밸런싱)

 **가용성: 시스템이 계속 가동될 수 있는 능력.

 - 이중화 구성은 가용성이 높은 시스템을 만들기 위한 대표적인 요소 기술. 예비 장치를 준비하여 만약 장애가 발생되어도 시스템 전체가 정지되지 않도록 하는 기술 요소.
 - 그러나 예비 장치로 구축한 서버를 이용하지 않고 그냥 보유만 하는 것은 비용 낭비임.
 - 따라서 시스템의 가용성 향상과 처리 성능 향상을 동시에 해결하기 위한 기술로서 부하 분산이 적용됨.

 **부하 분산: 서버의 처리를 복수 개의 기기에서 처리되도록 설정하는 것. (특정 기기로 부하가 집중되는 것을 방지)


3.4.1 - Custom AMI에 의한 EC2 인스턴스 생성

 **스케일 아웃: 동일한 구성의 웹 서버를 병렬로 여러 대 가동시켜서 부하를 분산시키는 방법.

 **커스텀 AMI: OS가 포함된 EC2 인스턴스의 풀 백업.

 과정:
 - 전제 조건 - 해당 EC2 인스턴스 정지.
 - AMI 생성: 오른쪽 클릭 - [영상] - [이미지 만들기] - 이미지 이름, 설명, 볼륨 설정 - [이미지 만들기]
 - AMI에서 EC2 인스턴스 생성(Launch)
 - 동작 확인: 원격 로그인 후, 브라우저에서 퍼블릭 IP나 퍼블린 DNS에 접속. 

 인스턴스 볼륨:
 - 스냅샷: S3에 보관되어 있는 볼륨의 백업.

 - 볼륨 유형: 
    = 범용(SSD): 1GB당 3 IOPS의 퍼포먼스를 갖는 스토리지.
    = Provisioned IOPS(SSD): 4000 IPOS까지 성능을 임의로 지정할 수 있는 스토리지.
    = 마그네틱: 자기 디스크 방식의 스토리지. (SSD에 비해 저렴)

 - IOPS: 볼륨에서 지원되는 1초에 읽고 쓰는 횟수의 단위. (1초당 I/O 처리 횟수)

 - 일괄 삭제: 인스턴스가 삭제 될 때, EBS 볼륨의 자동 삭제 여부.

 - 암호화 종료: AES-256 알고리즘으로 암호화 여부.


3.4.2 - ELB에 의한 부하 분산 시스템 구축

 1. 로드 밸런서 작성: [로드 밸런서 생성] - [로드 밸런서 정의] - [보안 그룹 할당] - [보안 설정 구성] - [상태 확인(헬스 체크) 설정] - [EC2 인스턴스 추가] - [태그 추가] - [로드 밸런서 작성(생성)]
 - 로드 밸런서의 네트워크가 내 기본 VPC가 되어있는 것을 확인. (in 로드 밸런서 정의)
 - 포트 80 (in 보안 그룹 할당)
 - SSL 인증서를 설치함으로서 https 통신 (in 보안 설정 구성) (https 통신을 하려면 포트 443 추가)
 - '영역 간 로드 균형 조정 사용'을 체크하면 가용 영역을 넘어 EC2 인스턴스로 처리를 분산 가능. 가용 영역 자체에서 장애가 발생하더라도 서비스가 정지되는 것을 예방할 수 있음. (in EC2 인스턴스 추가)
 - 태그 추가는 ELB에 이해하기 쉬운 특정 이름을 지정하는 것임.
 
 **헬스 체크: 서버의 정상 여부를 확인
 - 핑 프로토콜: 헬스 체크하는 프로토콜.
 - 핑 포트: 헬스 체크하는 포트.
 - 핑 패스: 어느 파일에 대한 헬스 체크를 수행할 것인지 설정.
 - 응답 시간 아웃: 헬스 체크로부터 응답을 수신할 때까지 소요된 처리 대기 시간으로 설정한 시간이 지났을 때는 처리 중단.
 - 헬스 체크 간격: 헬스 체크 수행 간격
 - 비정상 한계 값: 인스턴스가 '이상'이 있다고 판단할 때까지 실시하는 헬스 체크 횟수.
 - 정상 한계 값: 인스턴스가 '정상'이라고 판단할 떼까지 실시하는 헬스 체크 횟수.


3.4.3 - ELB 동작 확인

 과정:
 - [EC2] - [로드 밸런서] - [인스턴스 탭] - [상태]

 - 정상: InService
 - 비정상:  OutOfService

 - DNS 이름의 URL로 브라우저에서 접속.


3.5 - Elastic IP를 사용한 독자 도메인으로 사이트 운용

 - 고정 IP를 할당.

3.5.1 - 고정 IP 주소 할당.

 - EC2가 사전에 정의되어 있는 인스턴스를 기동하면, 인터넷으로부터 접속할 때 접속 지점이 되는 '퍼블릭 IP 주소'와 '퍼블릭 Host 이름'이 할당됨.
 - 그러나 인스턴스를 중단하고 다시 기동하면 인스턴스 주소가 변경되어 버림.

 - 따라서 인스턴스에 고정 IP를 할당함으로써, 항상 같은 IP 주소를 이용할 수 있게 함.
 - 즉, Elastic IP를 이용함으로써 AWS 계정에 대해서 정적인 IP 주소가 부여되게 됌.

 1. 고정 IP 설정:
 - [EC2] - [Elastic IPs] - [새 주소 할당] - [할당]

 2. 주소 관련성:
 - [액션] - [연관 주소] - [EC2 인스턴스 선택] - [Associate]

 3. 동작 확인 [후, 정지]


3.5.2 - Route 53에 의한 DNS 서버 설정.

 **DNS: 도메인 네임 시스템
 **Route 53: DNS의 다양한 기능 제공하는 서비스.

 기능:
 - 도메인 등록: 도메인 이름을 구입하여 관리.
 - DNS 서비스: 도메인 이름을 IP 주소로 변환.
 - 헬스 체크: 요청을 애플리케이션에 보내고 헬스 체크.

 과정:
 - [Route 53] - [DNS 관리] - [Get started now]

 - [호스팅 된 영역(Hosted Zones)] - [호스팅 된 영역 만들기(Create Hosted Zone)] - 이름, 설명 지정 - [생성]

 - 레코드 설정
    **레코드: DNS 서버에서 IP주소와 호스트 이름을 연결하기 위한 엔트리(Entry).
    - [레코드 세트 생성] - [호스트 이름에 할당된 고정 IP 주소를 부여하기 위해 순방향 A 레코드에 등록(이름, 유형, 값)] - [생성]
    - 같은 방식으로 역방향 PTR 레코드도 등록.
    - 등록한 레코드 확인.

 - 레스지스타(Registrar) 등록: Route 53에서 등록한 DNS를 레지스트라의 네임 서버에 지정.

 - 동작 확인


3.6 - CloudFront를 사용한 데이터 전달

웹 사이트 중에는 용량이 큰 사진 데이터나 동영상 등 스트리밍 데이터를 배포하는 것도 있음.

대용량 데이터를 전 세계에 효율적으로 전달.


3.6.1 - CloudFront란

콘텐츠를 전송하는 웹 서비스.
웹 콘텐츠를 Edge Location이라고 불리는 네트워크를 경유하여 배포.

**Edge Location: CloundFront, Route 53 등을 제공하는 데이터 센터.

클라이언트가 CloudFront에서 웹 콘텐츠에 접속하면, Edge Location 장소에 전송.
1. 웹 콘텐츠가 Edge Location에 존재할 때, CloudFront는 웹 콘텐츠를 바로 전달.
2. 존재하지 않을 때, 아마존 S3 버킷과 EC2에서 동작하는 웹 서버에서 콘텐츠를 취득.

즉, CloudFront는 웹 콘텐츠용 '캐시 서버'를 제공하는 서비스.
캐시 서버로 이용함으로써 웹 사이트의 사진과 동영상 파일의 읽기 시간을 단축 가능.


3.6.2 - CloudFront를 사용한 웹 콘텐츠 배포

순서:
 - 클라우드프론트 기동
 - 콘텐츠 배포 방법 설정
 - 콘텐츠 배포 설정

클라우드프론트에 의한 콘텐츠 배포 방법:
 - Web: http나 https를 사용해서 접속하는 웹 콘텐츠를 전달
 - RTMP: Adobe사가 개발하는 스트리밍 전송 프로토콜. RTMP를 사용하여 동영상 등을 스트리밍.

콘텐츠 배포 설정:
 - Origin Domain Name: 웹 콘텐츠 배포 기준 도메인 선택.
 - Origin Path: Top page의 Path 지점.
 - Origin ID: 임의의 ID를 설정

여기까지 완료하면 Edge Location 내의 Edge Server로 전송할 수 있음.








