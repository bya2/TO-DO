0930

Cache:
속도를 빠르게 하기 위해서 데이터를 미리 복사해둔 임시 저장소.

HTTP Cache:
서버에서 가져온 리소스를 임시로 저장해두는 곳. (웹표준) (리소스: HTML, CSS, Image ...)

- 문제점: 사이트의 실제 자원과 캐시 자원이 달라지는 상황. 

- Expriation(만료) > Cache-Control: 응답 헤더(Response Headers)에 자료의 유효기간 설정.
- Validation(검증) > ETag(자원의 내용 식별자): 

ETag(Resonse Headers):
    - Mozilla: 특정 버전의 리소스를 식별하는 식별자.

    - 1. ETag를 'If-None-Match'라는 헤더의 값에 보내서, 캐시를 계속 사용할 수 있는지 확인.
    - 2. 리소스 내용 버전이 같으면, 'HTTP Status code'를 304로 응답. (304. Not modified)


- 쿠키는 사용자 정보(로그인, 토큰): ex) 은행 사이트에서 10분 뒤 로그아웃되는 기능은 쿠키 만료.

- 캐시는 파일(HTML, CSS, 이미지): ex) 개구리 게임 캐시가 저장되어, 재방문해도 같은 level 유지.

- 요청 헤더 If-None-Match와 응답 헤더 ETag의 값을 비교해서 리소스 내용 버전을 확인하여 캐시 내 리소스를 계속 사용할 지 검증.


캐시:
Cache-Control
    - no-store: 아무것도 캐싱하지 않음.
    - no-cache: 모든 캐시를 사용하기 전에, 서버에 캐시를 사용해도 되냐고 물어보는 것.
    - must-revalidate: 만료된 캐시만 서버에 확인을 받도록 함.
    - public: 공유 캐시에 저장해도 됌.
    - private: 브라우저와 같은 특정 사용자 환경에만 저장.
    - max-age=3600: 캐시 유효시간

Age
    : Cach-Control에서 max-age를 설정했을 때, 시간이 얼마나 흘렀는지에 대한 초 단위의 값이 '캐시 응답 헤더'에 포함됌.
 
Expires
    - 응답 컨텐츠가 언제 만료되는 지에 대한 시각.
    - Cache-Control의 max-age가 있을 경우 이 헤더는 무시됌.

If-None-Match
    - 서버보고 ETag가 달라졌는지 검사해서 ETag가 다를 경우에만 캐시 내 리소스 변경.
    - ETag가 같다면, 304 응답

쿠키:
Set-Cookie
     - 서버에서 클라이언트에게 이런 이런 쿠키를 저장하라고 명령하는 '응답 헤더'.
     - 즉, 키에 값을 전송.
     - 옵션:
                   - Expires: 쿠키 만료 날짜.
                   - Max-Age: 쿠키 수명. 사용하면 Expires 무시.
                   - Secure: https에서만 쿠키가 전송.
                   - HttpOnly: 자바스크립트에서 쿠키에 접근할 수 없음. XSS 요청을 막으려면 활성화하는 것이 좋음. (노드 접근 가능?)
                   - Domain: 도메인이 일치하는 요청에서만 쿠키 전송. 

                   - 도메인이 다른 쿠키는 '써드 파티 쿠키'로 클라이언트를 추적하고 있는 쿠키.

Cookie
    - 클라이언트에서 서버에게 쿠키를 '전송'할 때 이 '요청 헤더'에 담아서 보냄.
    - 서버는 이 쿠키를 파싱해서 사용.
    - CSRF 공격같은 것을 막기 위해서 서버는 '쿠키가 제대로 된 상황에서 온 것인지 확인하는 로직'을 갖춰야함.


