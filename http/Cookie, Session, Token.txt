Cookie:
    쿠키를 이용해서 서버는 사용자의 브라우저에 데이터를 넣을 수 있음. 사용자에 대한 정보를 기억하기 위함.
    사이트를 방문하면 브라우저는 서버에 요청을 보내고 서버는 이에 응답함.
    응답에는 모든 데이터와 사용자가 찾는 페이지 정보가 있고, 그 중에 브라우저가 저장하고자하는 쿠키가 있을 수 있음.
    브라우저가 응답을 통해 쿠키를 저장하고 나선, 해당 사이트를 방문할 때마다 브라우저는 해당 쿠키도 요청과 함께 보냄.

    - 쿠키는 도메인에 따라 제한됌.
    - 쿠키는 유효기간이 있음. 인증 뿐만 아니라 여러가지 정보를 저장할 수 있음.
    -예) 언어 설정
                   - 클라이언트에서 언어 설정을 변경하면, 서버는 쿠키를 주고 브라우저는 쿠키를 저장함.
                   - 다음에 사이트를 방문할 때, 클라이언트는 쿠키를 요청과 함께 서버로 보냄.
                   - 서버는 쿠키가 기억해둔 언어설정 페이지를 제공.

Session:
    HTTP. 웹사이트를 이용할 때 쓰는 프로토콜. 해당 프로토콜은 stateless.
    stateless: 서버로 가는 모든 요청이 이전 request와 독립적으로 다뤄짐. request끼리 연결이 없음. 메모리가 없음.
    즉, request가 끝나면 서버는 사용자가 누군지 잊어버림.
    따라서 요청할 때마다 사용자가 누구인지 서버에게 알려줘야함.
    이를 하는 방법이 바로 session.

    -예) 로그인 후 유지.
                   - 클라이언트에서 로그인을 하면 ID와 PW를 서버로 보냄.
                   - 정보가 맞다면, 서버는 세션DB에 해당 유저를 생성. (세션에는 별도의 ID가 있음.) 
                   - 해당 세션 ID는 쿠키를 통해 브라우저로 돌아오고 저장됌.
                   - 따라서 같은 웹사이트의 다른 페이지로 이동하면, 브라우저는 세션ID를 가지고 있는 쿠키를 서버에게 보낼 것임.
                   - (왜냐하면 쿠키는 자동으로 보내지니깐)
                   - 서버는 들어오는 세션 ID를 포함한 쿠키를 확인.
                   - 그런데, 아직까지도 서버는 우리가 누군지 모름. 세션 ID가 있는 쿠키를 지닌 요청이 있다는 것을 알 뿐임.
                   - 해당 세션 ID를 가지고 세션 DB를 확인할 것이고, 거기서 해당 ID는 유저명 Nico의 것이란 걸 알게되고, 바로 그제서야 서버는 우리가 누구인지 알게되고, 바로 그때 '환영해요 Nico' 메세지를 띄울 수 있음.
                   - 해당 요청이 끝나고 다른 페이지로 이동을하면, 이 모든 프로세스가 반복됌.

                   기억해야할 것은, 중요한 건 유저 정보는 모두 서버에 있다는 것. 유저가 가지고 있는 것은 세션 ID 뿐임.
                   쿠키는 세션 ID를 전달하기 위한, 매개체일 뿐임.
                   세션을 이용해 iOS, Android 앱을 만들 순 있지만, 쿠키는 사용할 수 없음. 쿠키는 브라우저에만 있기 때문. (쿠키는 네이티브 앱에는 없음). 근데, 바로 이 경우 Token을 사용함. 서버에 토큰을 보내는 것.

Token:
    - 토큰은 String
    
    해당 토큰을 서버에 보내고, 서버는 세션 DB에서 해당 토큰과 일치하는 사용자를 찾음.

    세션에 대해서 기억해야할 것은. 현재 로그인한 유저들의 모든 세션 ID를 세션 DB에 저장해야한다는 것임.
    즉 요청이 들어올 때마다 서버는 쿠키를 받아서 세션 ID를 보고 일치하는 유저를 찾아야하고 그제서야 다음 작업을 수행 가능. (요청이 있을 때마다 DB를 찾아야함. 유저가 늘어날 때마다 DB 리소스가 늘어남.)
    바로 이 때 JWT가 등장함.
    
    JWT:
        - 토큰 형식임. 세션 ID보다 훨씬 김. (왜냐하면 쿠키는 공간 제약이 있기 때문, JWT는 제약이 없어서 길어도 됌)
        - JWT로 유저 인증을 처리하면, 세션 DB를 갖을 필요가 없고, 서버는 유저 인증을 한다고 많은 일을 하지 않아도 됌.

로그인 예시를 통한 JWT와 세션의 차이:
    - JWT의 경우)
                   - 아이디와 비번을 서버에 보내고, 정보가 맞으면, 서버는 DB에 뭔가를 생성하지 않음.
                   - 대신 서버는 유저의 아이디를 가져다가 '사인 알고리즘'을 이용해서 사인을 함.
                   - 그리고 해당 '사인된 정보'를 string 형태로 응답을 보냄.
                   - 이제 클라이언트에서 서버에 요청을 보내려면 세션 ID와 비슷하게 '사인된 정보'나 토큰을 서버에 보내야함.
                   - 서버는 토큰을 받으면 해당 사인이 유효한지 체크 (토큰을 조작했는지 등..)
                   - 토큰이 맞다면 서버는 사용자를 유저로 인증.
                   0. 이게 가장 큰 차이점이다 (세션과)
                                      - JWT는 해당 토큰이 유효한지만 검증하면 된다는 것.!
                                      - JWT는 암호화되어 있지 않음. 암호화되면 아무도 읽거나 이해 불가.
                                      - 아무튼 이에 따라 누구나 열어서 해당 컨텐츠를 볼 수 있음. (비밀번호를 JWT에 넣으면 안되는이유)

    - 각 단점
                   - 세션:
                           원하지 않는 디바이스에서 강제적으로 로그아웃 가능. 계정 공유 숫자를 제한 가능.
                           이 모든 것이 가능한 것은 서버가 누가 로그인했는 지 저장했고, 세션DB가 있기 때문.

                           - 이를 위해선 DB를 사야함. 유저가 늘어나면 늘어날 수록 DB도 커져야함. 이를 위한 DB로는 주로 Redis 사용.
                           - 해당 목적을 수행하기 위한, 빠르고 저렴한 DB
                   - JWT:
                           생성된 토큰을 추적하지 않음. 서버가 아는 것은 토큰이 유효한가에 대한 여부. DB 따로 살 필요 없음 
                           -. 하지만 세션과 같은 기능이 불가능. (해당 토큰이 만료되기 전까지는 유효하기 때문)
                           그렇다고 JWT가 별로인 것은 아님. 데이터를 사인하고 유저에게 보내고 해당 데이터를 돌려받을 때 유효성 검증이 가능함. 근데 이게 DB없이 모든 것이 가능함. 코로나 QR체크인은 JWT가 들어간 QR코드


쿠키 : 그냥 옮기는 시스템. (매개체)
토큰: 서버가 기억하는 이상한 텍스트. ID카드 처럼 서버에게 보여줘야하는 것임.
JWT: 정보를 갖고 있는 토큰. DB없이 검증 가능해서 속도, 비용적으로 개꿀.
유저 인증을 위해서 세션이나 JWT 사용