1003

CORS: Cross Origin Resource Sharing: 교차 출처 자원 공유


브라우저는 동일 출처 정책(SOP)에 의해 스크립트 단(<script>)에서 다른 도메인의 서버로 HTTP 요청을 하는 것이 제한됌.
ex) 'naver.com'라는 url의 웹페이지에서 `XMLHttpRequest` API를 통해 'open-api.com'의 API 서버에 요청하는 것은 차단됌.

0. 웹 애플리케이션의 역할이 커지면서, 이 제한을 우회하려는 방법들을 요구.
0. 따라서 CORS라는 메커니즘을 브라우저에 적용.
0. CORS는 W3C의 권고안이 되어 웹 표준이 됌.

0. 동일 출처 정책이 사라진 것은 아님.
0. 추가적인 작업을 해야 다른 도메인 간의 리소스 공유가 가능.

-. CORS 요청을 가능하게 하기 위해서, 다른 도메인을 가진 서버 쪽(Target)에서 '특별한 응답 헤더'를 설정해야함.

-. 스크립트 단에서 다른 도메인의 서버로 HTTP 요청.
-. 브라우저는 실제 요청을 보내기 전 '사전 요청(preflight)'을 보냄.
-. 사전 요청에 대한 응답을 받은 후, 요청이 가능하다고 판단되면, 브라우저는 원래대로 실제 HTTP 요청을 보냄.

	1. (JS)		XMLHttpRequest로 HTTP 요청.
	2. (Browser) 	다른 도메인으로 가는 HTTP 요청임을 감지.
	3. (Browser) 	사전 요청 전송 (HTTP Options Method).
	4. (Server)	사전 요청에 대한 응답 전송. (알맞은 헤더가 설정된 응답)
	5. (Browser)	CORS 요청이 가능하다고 판단.
	6. (Browser)	원래의 HTTP 요청 지속.

-. 1번을 제외하고 브라우저와 서버가 알아서 해주는 과정.
-. 4번에서 서버는 이 과정이 시작되기 전에 응답에 알맞는 헤더가 설정되도록 작업하기만 하면 됌.
-. 3번의 사전 요청은 생략되는 경우도 있으나, 클라이언트에서 어떤 헤더나 메소드로 요청을 하는가에 따라서 달라짐.

-사전 요청을 하지 않아도 된다고 판단되는 간단한 CORS 요청들:
    -. 요청 메서드: GET, HEAD, POST
    -. 스크립트에서 수동 설정 허용되는 헤더: Accept, Accept-Language, Content-Language, Content-Type
    -. Content-Type 헤더 값: application/x-www-form-urlencoded, multipart/form-data, text/plain

    0. 이 모든 조건을 만족하고, 요청을 받는 서버에서 알맞은 헤더가 사전에 설정되어있지 않으면 CORS 요청은 거부됌.
    -. CORS 요청을 가능하게 끔 하는 헤더는 Access-Control-Allow-Origin
    -. 이 헤더가 설정되어 있지 않거나, * 혹은 요청 측의 도메인이 포함되지 않았다면 요청은 거부됌. (서버 단에서 별도로 설정)

    -. node(express)에서는 app.use((req, res, next) => res.header('Access-Control-Allow-Origin', '*'); next();}); 와 같이 설정.


-사전 요청 전달 조건:
    -. 요청 메서드: GET, HEAD, PORT 이외의 메서드
    -. 요청 헤더 중 Content-Type의 값: application/x-www-form-urlencoded, multipart/form-data, text/plain 이외의 값
    -. 커스텀 헤더 설정